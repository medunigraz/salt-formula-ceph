{%- from "ceph/map.jinja" import setup with context -%}
# begin crush map

{%- set types = {} -%}
{%- set hosts = {} -%}
{%- set osds = {} -%}
{%- set weights = {} -%}

{%- for node_name, node_grains in salt['mine.get']('*', 'grains.items').items() -%}
  {%- if node_grains.ceph.ceph_disk is defined -%}
    {# load OSDs and compute weight#}
    {%- set node_weight = [] -%}
    {%- for osd_id, osd in node_grains.ceph.ceph_disk.items() -%}
      {%- do osd.update({'host': node_grains.nodename }) -%}
      {%- do osds.update({osd_id: osd}) -%}
      {%- do node_weight.append(osd.weight|float) -%}
    {%- endfor -%}

    {%- do hosts.update({node_grains.nodename: {'weight': node_weight|sum, 'parent': node_grains.ceph_crush_parent }}) -%}

  {%- endif -%}
{%- endfor -%}

{%- set _crush = setup.crush -%}
{%- set _buckets = [] %}

# tunables
{%- for k, v in _crush.get('tunables', {}).items() %}
tunable {{ k }} {{ v }}
{%- endfor %}

# types
{%- for i in _crush.get('type', []) %}
type {{ loop.index0 }} {{ i }}
{%- do types.update({loop.index: i}) %}
{%- endfor %}

# devices
{%- set ceph_version = pillar.ceph.common.version -%}
{%- if ceph_version not in ['kraken', 'jewel'] %}
{% for disk_id, disk in osds|dictsort %}
device {{ disk_id }} osd.{{ disk_id }}{%- if disk.get('class') %} class {{ disk.class }}{% endif %}
{%- endfor %}
{%- else %}
{% for disk_id, disk in osds|dictsort %}
device {{ disk_id }} osd.{{ disk_id }}
{%- endfor %}
{%- endif %}

{% set count = [1] %}

# host buckets
{%- for bucket in hosts %}
{%- set weight = [] %}
host {{ bucket }} {
  id -{{ count[0] }}
  alg straw2
  hash 0
  {%- for disk_id, disk in osds.items() %}
  {%- if disk.host == bucket %}
  item osd.{{ disk_id }} weight {{ disk.weight }}
  {%- do weight.append(disk.weight|float) %}
  {%- endif %}
  {%- endfor %}
  {%- do weights.update({'host-' ~ bucket: weight|sum}) %}
  # weight: {{ weights['host-' ~ bucket] }}
  # parent: {{ hosts[bucket].parent }}
  {% if count.append(count.pop() + 1) %}{% endif %}
}
{%- endfor %}

{%- for i in _crush.type|reverse %}
{%- set _typeid = loop.revindex -%}
{%- for resource in _crush.get(i, {}) -%}
{% set weight = [] %}
{{ i }} {{ resource.name }} {
  id -{{ count[0] }}
  alg {{ resource.get('alg', 'straw2') }}
  hash {{ resource.get('hash', 0) }}

  # list children resources - {{ _crush.type[_typeid] }}
  {%- if _crush.type[_typeid] == 'host' %}

    {%- for r_name, r in hosts.items() %}
      {%- if r.parent == resource.name %}
  item {{ r_name }} weight {{ r.weight }}
      {%- do weight.append(r.weight) %}
      {%- endif %}
    {%- endfor %}

  {%- else %}

    {%- for r in _crush.get(_crush.type[_typeid], []) %}
      {%- if r.parent == resource.name %}
      {%- set rw = weights[_crush.type[_typeid] ~ '-' ~ r.name] %}
  item {{ r.name }} weight {{ rw }}
      {%- do weight.append(rw) %}
      {%- endif %}
    {%- endfor %}

  {%- endif %}

  {%- do weights.update({i ~ '-' ~ resource.name: weight|sum }) %}
  # weight: {{ weight|sum }}
}
{% if count.append(count.pop() + 1) %}{% endif %}
{%- endfor %}
{%- endfor %}

# rules
{%- for rule_name, rule in _crush.get('rule', {}).items() %}
rule {{ rule_name }} {
  ruleset {{ rule.ruleset }}
  type {{ rule.type }}
  min_size {{ rule.min_size }}
  max_size {{ rule.max_size }}
  {%- for step in rule.steps %}
  step {{ step }}
  {%- endfor %}
}
{% endfor %}
# end crush map

